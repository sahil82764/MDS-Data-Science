w <- xr - xl
# Defining the simple function with equation provided in the question
fun <- function(x) {
return((x - 1)^3 - 2 * x^2 + 10 - sin(x))
}
# Modifying the bisection method with bracket broadening as asked in the question
bisection_broaden <- function(fun, xl, xr, tolerance = 1e-6, max_iter = 100) {
iter <- 0
# We are using a while loop until the root is found or max iterations reached
while (iter < max_iter) {
# Checking if root lies between the interval
if (fun(xl) * fun(xr) <= 0) {
# Performing the standard bisection method
while ((xr - xl) / 2 > tolerance) {
m <- (xl + xr) / 2
if (fun(m) == 0) {
return(m)
} else if (fun(xl) * f(m) < 0) {
xr <- m
} else {
xl <- m
}
}
return((xl + xr) / 2)
} else {
# Broadening the bracket
m <- (xl + xr) / 2
w <- xr - xl
xl <- m - w
xr <- m + w
iter <- iter + 1
}
}
stop("Maximum iterations reached without finding a root.")
}
# Testing the function with given parameters
xl <- 1
xr <- 2
root <- bisection_broaden(fun, xl, xr)
# Defining the simple function with equation provided in the question
fun <- function(x) {
return((x - 1)^3 - 2 * x^2 + 10 - sin(x))
}
# Modifying the bisection method with bracket broadening as asked in the question
bisection_broaden <- function(fun, xl, xr, tolerance = 1e-6, max_iter = 100) {
iter <- 0
# We are using a while loop until the root is found or max iterations reached
while (iter < max_iter) {
# Checking if root lies between the interval
if (fun(xl) * fun(xr) <= 0) {
# Performing the standard bisection method
while ((xr - xl) / 2 > tolerance) {
m <- (xl + xr) / 2
if (fun(m) == 0) {
return(m)
} else if (fun(xl) * f(m) < 0) {
xr <- m
} else {
xl <- m
}
}
return((xl + xr) / 2)
} else {
# Broadening the bracket
m <- (xl + xr) / 2
w <- xr - xl
xl <- m - w
xr <- m + w
iter <- iter + 1
}
}
stop("Maximum iterations reached without finding a root.")
}
# Testing the function with given parameters
xl <- 1
xr <- 2
root <- bisection_broaden(fun, xl, xr)
bisection_with_broadening <- function(f, xl, xr, max_iter, max_broadening) {
iter_count <- 0
broadening_count <- 0
while (iter_count < max_iter) {
iter_count <- iter_count + 1
# Check if the function values have opposite signs at the endpoints
if (f(xl) * f(xr) <= 0) {
# Calculate the midpoint
m <- (xl + xr) / 2
# Update the interval based on the sign of f(m)
if (f(xl) * f(m) < 0) {
xr <- m
} else {
xl <- m
}
} else {
# Broaden the bracket if the function values have the same sign
if (broadening_count < max_broadening) {
broadening_count <- broadening_count + 1
w <- xr - xl
xl <- m - w
xr <- m + w
} else {
# Stop if the bracket can't be broadened further
print("Bracket broadening limit reached. Could not find a root.")
return NULL
bisection_with_broadening <- function(f, xl, xr, max_iter, max_broadening) {
iter_count <- 0
broadening_count <- 0
while (iter_count < max_iter) {
iter_count <- iter_count + 1
# Check if the function values have opposite signs at the endpoints
if (f(xl) * f(xr) <= 0) {
# Calculate the midpoint
m <- (xl + xr) / 2
# Update the interval based on the sign of f(m)
if (f(xl) * f(m) < 0) {
xr <- m
} else {
xl <- m
}
} else {
# Broaden the bracket if the function values have the same sign
if (broadening_count < max_broadening) {
broadening_count <- broadening_count + 1
w <- xr - xl
xl <- m - w
xr <- m + w
} else {
# Stop if the bracket can't be broadened further
print("Bracket broadening limit reached. Could not find a root.")
return(NULL)
}
}
}
# Return the midpoint as the approximate root
return (xl + xr) / 2
}
# b. Use your modified function to find a root of f(x) = (x − 1)3 − 2x2 + 10 − sin(x) starting with xl = 1 and xr = 2
# Define the function
f <- function(x) {
(x - 1)^3 - 2 * x^2 + 10 - sin(x)
}
# Set the initial interval and maximum iterations
xl <- 1
xr <- 2
max_iter <- 100
max_broadening <- 5
# Find the root using the bisection method with broadening
root <- bisection_with_broadening(f, xl, xr, max_iter, max_broadening)
bisection_with_broadening <- function(f, xl, xr, max_iter, max_broadening) {
iter_count <- 0
broadening_count <- 0
while (iter_count < max_iter) {
iter_count <- iter_count + 1
# Check if the function values have opposite signs at the endpoints
if (f(xl) * f(xr) <= 0) {
# Calculate the midpoint
m <- (xl + xr) / 2
# Update the interval based on the sign of f(m)
if (f(xl) * f(m) < 0) {
xr <- m
} else {
xl <- m
}
} else {
# Calculate the midpoint for broadening purposes
m <- (xl + xr) / 2
# Broaden the bracket if the function values have the same sign
if (broadening_count < max_broadening) {
broadening_count <- broadening_count + 1
w <- xr - xl
xl <- m - w
xr <- m + w
} else {
# Stop if the bracket can't be broadened further
print("Bracket broadening limit reached. Could not find a root.")
return(NULL)
}
}
}
# Return the midpoint as the approximate root
return((xl + xr) / 2)
}
# b. Use your modified function to find a root of f(x) = (x − 1)^3 − 2x^2 + 10 − sin(x) starting with xl = 1 and xr = 2
# Define the function
f <- function(x) {
(x - 1)^3 - 2 * x^2 + 10 - sin(x)
}
# Set the initial interval and maximum iterations
xl <- 1
xr <- 2
max_iter <- 100
max_broadening <- 5
# Find the root using the bisection method with broadening
root <- bisection_with_broadening(f, xl, xr, max_iter, max_broadening)
# Print the result
print(root)
